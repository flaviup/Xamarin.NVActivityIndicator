// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum NVActivityIndicatorType : NSInteger;
@class UIFont;
@class UIColor;
@class NSNumber;

/// Class packages information used to display UI blocker.
SWIFT_CLASS("_TtC23NVActivityIndicatorView12ActivityData")
@interface ActivityData : NSObject
- (nonnull instancetype)init;
- (nonnull instancetype)initWithType:(enum NVActivityIndicatorType)type;
- (nonnull instancetype)initWithType:(enum NVActivityIndicatorType)type size:(CGSize)size message:(NSString * _Nullable)message messageFont:(UIFont * _Nullable)messageFont color:(UIColor * _Nullable)color padding:(NSNumber * _Nullable)padding displayTimeThreshold:(NSNumber * _Nullable)displayTimeThreshold minimumDisplayTime:(NSNumber * _Nullable)minimumDisplayTime backgroundColor:(UIColor * _Nullable)backgroundColor textColor:(UIColor * _Nullable)textColor;
- (nonnull instancetype)initWithType:(enum NVActivityIndicatorType)type message:(NSString * _Nullable)message messageFont:(UIFont * _Nullable)messageFont color:(UIColor * _Nullable)color padding:(NSNumber * _Nullable)padding displayTimeThreshold:(NSNumber * _Nullable)displayTimeThreshold minimumDisplayTime:(NSNumber * _Nullable)minimumDisplayTime backgroundColor:(UIColor * _Nullable)backgroundColor textColor:(UIColor * _Nullable)textColor;
@end

@class CALayer;

SWIFT_PROTOCOL("_TtP23NVActivityIndicatorView36NVActivityIndicatorAnimationDelegate_")
@protocol NVActivityIndicatorAnimationDelegate
- (void)setUpAnimationIn:(CALayer * _Nonnull)layer size:(CGSize)size color:(UIColor * _Nonnull)color;
@end


/// Presenter that displays NVActivityIndicatorView as UI blocker.
SWIFT_CLASS("_TtC23NVActivityIndicatorView28NVActivityIndicatorPresenter")
@interface NVActivityIndicatorPresenter : NSObject
/// Shared instance of <code>NVActivityIndicatorPresenter</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NVActivityIndicatorPresenter * _Nonnull sharedInstance;)
+ (NVActivityIndicatorPresenter * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Display UI blocker.
/// \param data Information package used to display UI blocker.
///
- (void)startAnimating:(ActivityData * _Nonnull)data;
/// Remove UI blocker.
- (void)stopAnimating;
/// Set message displayed under activity indicator view.
/// \param message message displayed under activity indicator view.
///
- (void)setMessage:(NSString * _Nullable)message;
@end

typedef SWIFT_ENUM(NSInteger, NVActivityIndicatorShape) {
  NVActivityIndicatorShapeCircle = 0,
  NVActivityIndicatorShapeCircleSemi = 1,
  NVActivityIndicatorShapeRing = 2,
  NVActivityIndicatorShapeRingTwoHalfVertical = 3,
  NVActivityIndicatorShapeRingTwoHalfHorizontal = 4,
  NVActivityIndicatorShapeRingThirdFour = 5,
  NVActivityIndicatorShapeRectangle = 6,
  NVActivityIndicatorShapeTriangle = 7,
  NVActivityIndicatorShapeLine = 8,
  NVActivityIndicatorShapePacman = 9,
};


SWIFT_CLASS("_TtC23NVActivityIndicatorView28NVActivityIndicatorShapeUtil")
@interface NVActivityIndicatorShapeUtil : NSObject
+ (CALayer * _Nonnull)layerWithShape:(enum NVActivityIndicatorShape)shape size:(CGSize)size color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum of animation types used for activity indicator view.
/// <ul>
///   <li>
///     Blank:                   Blank animation.
///   </li>
///   <li>
///     BallPulse:               BallPulse animation.
///   </li>
///   <li>
///     BallGridPulse:           BallGridPulse animation.
///   </li>
///   <li>
///     BallClipRotate:          BallClipRotate animation.
///   </li>
///   <li>
///     SquareSpin:              SquareSpin animation.
///   </li>
///   <li>
///     BallClipRotatePulse:     BallClipRotatePulse animation.
///   </li>
///   <li>
///     BallClipRotateMultiple:  BallClipRotateMultiple animation.
///   </li>
///   <li>
///     BallPulseRise:           BallPulseRise animation.
///   </li>
///   <li>
///     BallRotate:              BallRotate animation.
///   </li>
///   <li>
///     CubeTransition:          CubeTransition animation.
///   </li>
///   <li>
///     BallZigZag:              BallZigZag animation.
///   </li>
///   <li>
///     BallZigZagDeflect:       BallZigZagDeflect animation.
///   </li>
///   <li>
///     BallTrianglePath:        BallTrianglePath animation.
///   </li>
///   <li>
///     BallScale:               BallScale animation.
///   </li>
///   <li>
///     LineScale:               LineScale animation.
///   </li>
///   <li>
///     LineScaleParty:          LineScaleParty animation.
///   </li>
///   <li>
///     BallScaleMultiple:       BallScaleMultiple animation.
///   </li>
///   <li>
///     BallPulseSync:           BallPulseSync animation.
///   </li>
///   <li>
///     BallBeat:                BallBeat animation.
///   </li>
///   <li>
///     LineScalePulseOut:       LineScalePulseOut animation.
///   </li>
///   <li>
///     LineScalePulseOutRapid:  LineScalePulseOutRapid animation.
///   </li>
///   <li>
///     BallScaleRipple:         BallScaleRipple animation.
///   </li>
///   <li>
///     BallScaleRippleMultiple: BallScaleRippleMultiple animation.
///   </li>
///   <li>
///     BallSpinFadeLoader:      BallSpinFadeLoader animation.
///   </li>
///   <li>
///     LineSpinFadeLoader:      LineSpinFadeLoader animation.
///   </li>
///   <li>
///     TriangleSkewSpin:        TriangleSkewSpin animation.
///   </li>
///   <li>
///     Pacman:                  Pacman animation.
///   </li>
///   <li>
///     BallGridBeat:            BallGridBeat animation.
///   </li>
///   <li>
///     SemiCircleSpin:          SemiCircleSpin animation.
///   </li>
///   <li>
///     BallRotateChase:         BallRotateChase animation.
///   </li>
///   <li>
///     Orbit:                   Orbit animation.
///   </li>
///   <li>
///     AudioEqualizer:          AudioEqualizer animation.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, NVActivityIndicatorType) {
/// Blank.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBlank.
  NVActivityIndicatorTypeBlank = 0,
/// BallPulse.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallPulse.
  NVActivityIndicatorTypeBallPulse = 1,
/// BallGridPulse.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallGridPulse.
  NVActivityIndicatorTypeBallGridPulse = 2,
/// BallClipRotate.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallClipRotate.
  NVActivityIndicatorTypeBallClipRotate = 3,
/// SquareSpin.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationSquareSpin.
  NVActivityIndicatorTypeSquareSpin = 4,
/// BallClipRotatePulse.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallClipRotatePulse.
  NVActivityIndicatorTypeBallClipRotatePulse = 5,
/// BallClipRotateMultiple.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallClipRotateMultiple.
  NVActivityIndicatorTypeBallClipRotateMultiple = 6,
/// BallPulseRise.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallPulseRise.
  NVActivityIndicatorTypeBallPulseRise = 7,
/// BallRotate.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallRotate.
  NVActivityIndicatorTypeBallRotate = 8,
/// CubeTransition.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationCubeTransition.
  NVActivityIndicatorTypeCubeTransition = 9,
/// BallZigZag.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallZigZag.
  NVActivityIndicatorTypeBallZigZag = 10,
/// BallZigZagDeflect
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallZigZagDeflect
  NVActivityIndicatorTypeBallZigZagDeflect = 11,
/// BallTrianglePath.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallTrianglePath.
  NVActivityIndicatorTypeBallTrianglePath = 12,
/// BallScale.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallScale.
  NVActivityIndicatorTypeBallScale = 13,
/// LineScale.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationLineScale.
  NVActivityIndicatorTypeLineScale = 14,
/// LineScaleParty.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationLineScaleParty.
  NVActivityIndicatorTypeLineScaleParty = 15,
/// BallScaleMultiple.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallScaleMultiple.
  NVActivityIndicatorTypeBallScaleMultiple = 16,
/// BallPulseSync.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallPulseSync.
  NVActivityIndicatorTypeBallPulseSync = 17,
/// BallBeat.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallBeat.
  NVActivityIndicatorTypeBallBeat = 18,
/// LineScalePulseOut.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationLineScalePulseOut.
  NVActivityIndicatorTypeLineScalePulseOut = 19,
/// LineScalePulseOutRapid.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationLineScalePulseOutRapid.
  NVActivityIndicatorTypeLineScalePulseOutRapid = 20,
/// BallScaleRipple.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallScaleRipple.
  NVActivityIndicatorTypeBallScaleRipple = 21,
/// BallScaleRippleMultiple.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallScaleRippleMultiple.
  NVActivityIndicatorTypeBallScaleRippleMultiple = 22,
/// BallSpinFadeLoader.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallSpinFadeLoader.
  NVActivityIndicatorTypeBallSpinFadeLoader = 23,
/// LineSpinFadeLoader.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationLineSpinFadeLoader.
  NVActivityIndicatorTypeLineSpinFadeLoader = 24,
/// TriangleSkewSpin.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationTriangleSkewSpin.
  NVActivityIndicatorTypeTriangleSkewSpin = 25,
/// Pacman.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationPacman.
  NVActivityIndicatorTypePacman = 26,
/// BallGridBeat.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallGridBeat.
  NVActivityIndicatorTypeBallGridBeat = 27,
/// SemiCircleSpin.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationSemiCircleSpin.
  NVActivityIndicatorTypeSemiCircleSpin = 28,
/// BallRotateChase.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationBallRotateChase.
  NVActivityIndicatorTypeBallRotateChase = 29,
/// Orbit.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationOrbit.
  NVActivityIndicatorTypeOrbit = 30,
/// AudioEqualizer.
///
/// returns:
/// Instance of NVActivityIndicatorAnimationAudioEqualizer.
  NVActivityIndicatorTypeAudioEqualizer = 31,
};

@class NSCoder;

/// Activity indicator view with nice animations
SWIFT_CLASS("_TtC23NVActivityIndicatorView23NVActivityIndicatorView")
@interface NVActivityIndicatorView : UIView
/// Default type. Default value is .BallSpinFadeLoader.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum NVActivityIndicatorType DEFAULT_TYPE;)
+ (enum NVActivityIndicatorType)DEFAULT_TYPE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_TYPE:(enum NVActivityIndicatorType)value;
/// Default color of activity indicator. Default value is UIColor.white.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_COLOR:(UIColor * _Nonnull)value;
/// Default color of text. Default value is UIColor.white.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_TEXT_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_TEXT_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_TEXT_COLOR:(UIColor * _Nonnull)value;
/// Default padding. Default value is 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat DEFAULT_PADDING;)
+ (CGFloat)DEFAULT_PADDING SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_PADDING:(CGFloat)value;
/// Default size of activity indicator view in UI blocker. Default value is 60x60.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize DEFAULT_BLOCKER_SIZE;)
+ (CGSize)DEFAULT_BLOCKER_SIZE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_SIZE:(CGSize)value;
/// Default display time threshold to actually display UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD;)
+ (NSInteger)DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD:(NSInteger)value;
/// Default minimum display time of UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME;)
+ (NSInteger)DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME:(NSInteger)value;
/// Default message displayed in UI blocker. Default value is nil.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable DEFAULT_BLOCKER_MESSAGE;)
+ (NSString * _Nullable)DEFAULT_BLOCKER_MESSAGE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MESSAGE:(NSString * _Nullable)value;
/// Default font of message displayed in UI blocker. Default value is bold system font, size 20.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull DEFAULT_BLOCKER_MESSAGE_FONT;)
+ (UIFont * _Nonnull)DEFAULT_BLOCKER_MESSAGE_FONT SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MESSAGE_FONT:(UIFont * _Nonnull)value;
/// Default background color of UI blocker. Default value is UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_BLOCKER_BACKGROUND_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_BLOCKER_BACKGROUND_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_BACKGROUND_COLOR:(UIColor * _Nonnull)value;
/// Animation type.
@property (nonatomic) enum NVActivityIndicatorType type;
/// Color of activity indicator view.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Padding of activity indicator view.
@property (nonatomic) CGFloat padding;
/// Current status of animation, read-only.
@property (nonatomic, readonly) BOOL animating;
/// Current status of animation, read-only.
@property (nonatomic, readonly) BOOL isAnimating;
/// Returns an object initialized from data in a given unarchiver.
/// self, initialized using the data in decoder.
/// \param decoder an unarchiver object.
///
///
/// returns:
/// self, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
+ (NVActivityIndicatorView * _Nonnull)withFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame type:(enum NVActivityIndicatorType)type;
- (nonnull instancetype)initWithFrame:(CGRect)frame type:(enum NVActivityIndicatorType)type color:(UIColor * _Nullable)color;
/// Returns the natural size for the receiving view, considering only properties of the view itself.
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
///
/// returns:
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Start animating.
- (void)startAnimating;
/// Stop animating.
- (void)stopAnimating;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
